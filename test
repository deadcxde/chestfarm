local placeId = game.PlaceId
if placeId == 2753915549 or placeId == 4442272183 or placeId == 7449423635 then
    BF = true
end
if _G.ChestLoaded then
    print("Already loaded!")
    return
end
_G.ChestLoaded = 1

if BF == true then
    repeat wait() until game:IsLoaded()
    function Notification(text)
        local StarterGui = game:GetService("StarterGui")
        StarterGui:SetCore("SendNotification", {
            Title = "ChestFarm | deadcxde";
            Text = text
        })
    end
    local function RequestEntrance(CFrame)
        -- Script generated by SimpleSpy - credits to exx#9394
        local args = {
            [1] = "requestEntrance",
            [2] = CFrame.Position
        }
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end

    local OSTime = os.time()
    local Time = os.date('!*t', OSTime)
    local beliOnStart = game.Players.LocalPlayer.Data.Beli.Value
    local function send_webhook()
        local plr = game.Players.LocalPlayer
        function spacenumber(n) 
           local s = string.reverse(n)
           return s:gsub("(%d%d%d)", "%1 "):reverse() 
        end
        local Embed = {
            ["title"] = "<:nhech_mep:1135495034289004545> " .. plr.Name .. " <:nhech_mep:1135495034289004545> ",
            ["description"] = "**Beli when start: ** `" .. spacenumber(beliOnStart) .. "`\n" .. "**Beli now: ** `" .. spacenumber(plr.Data.Beli.Value) .. "`",
            ["type"] = "rich",
            ["color"] = tonumber(0xffff00),
            ["footer"] = {
                ["text"] = "chest farm bot",
            },
            ["timestamp"] = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec),
        };
        http.request {
            Url = _G.WebhookURL;
            Method = 'POST';
            Headers = {
                ['Content-Type'] = 'application/json';
            };
            Body = game:GetService'HttpService':JSONEncode({embeds = {Embed};});
        };
    end

    local function HopServer()
        local PlaceID = game.PlaceId
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local Deleted = false
        local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServersChestFarm.json"))
        end)
        if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServersChestFarm.json", game:GetService('HttpService'):JSONEncode(AllIDs))
        end
        function TPReturner()
            local Site;
            if foundAnything == "" then
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            local ID = ""
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                foundAnything = Site.nextPageCursor
            end
            local num = 0;
            for i,v in pairs(Site.data) do
                local Possible = true
                ID = tostring(v.id)
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _,Existing in pairs(AllIDs) do
                        if num ~= 0 then
                            if ID == tostring(Existing) then
                                Possible = false
                            end
                        else
                            if tonumber(actualHour) ~= tonumber(Existing) then
                                local delFile = pcall(function()
                                    -- delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num = num + 1
                    end
                    if Possible == true then
                        table.insert(AllIDs, ID)
                        wait()
                        pcall(function()
                            -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                            wait()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                        end)
                        wait(4)
                    end
                end
            end
        end
    
        function Teleport()
            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
            end
        end
    
        Teleport()
        wait(1)
    end
    local function toTarget(...)
        local RealtargetPos = {...}
        local targetPos = RealtargetPos[1]
        local RealTarget
        if type(targetPos) == "vector" then
            RealTarget = CFrame.new(targetPos)
        elseif type(targetPos) == "userdata" then
            RealTarget = targetPos
        elseif type(targetPos) == "number" then
            RealTarget = CFrame.new(unpack(RealtargetPos))
        end
    
        if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health == 0 then if tween then tween:Cancel() end repeat wait() until game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Health > 0; wait(0.2) end
    
        local tweenfunc = {}
        local Distance = (RealTarget.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude
        if Distance > 10000 then
            RequestEntrance(RealTarget)
            local Distance = (RealTarget.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude
        end

        if Distance < 1000 then
            Speed = 300
        elseif Distance >= 1000 then
            Speed = 380
        end
    
        local tween_s = game:service"TweenService"
        local info = TweenInfo.new((RealTarget.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude/Speed, Enum.EasingStyle.Linear)
        local tweenw, err = pcall(function()
            tween = tween_s:Create(game.Players.LocalPlayer.Character["HumanoidRootPart"], info, {CFrame = RealTarget})
            tween:Play()
        end)
    
        function tweenfunc:Stop()
            tween:Cancel()
        end 
    
        function tweenfunc:Wait()
            tween.Completed:Wait()
        end 
    
        return tweenfunc
    end
    local function TP(CFrame)
        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame / 2
    end
    Notification("Chest Farm auto loaded")
    local function findNearestChest()
        local latestDist = 9999999
        local cframe = 0
        for i,v in pairs(game.Workspace:GetChildren()) do
            if string.find(v.Name, "Chest") then
                if (v.CFrame.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude < latestDist then
                    latestDist = (v.CFrame.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude
                    cframe = v.CFrame
                end
            end
        end
        return cframe
    end
    spawn(function()
        while wait() do
            wait(0.5)
            if _G.ChestFarmEnabled then
                cframe = findNearestChest()
                if cframe then
                    tw = toTarget(cframe)
                end
            end
        end
    end)
    spawn(function()
        wait(1800)
        if _G.ChestFarmEnabled then
            if _G.BypassAntiCheat then
                HopServer()
            end
        end
    end)
    spawn(function()
        while wait() do
            wait(2)
            if _G.ChestFarmEnabled then
                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end
    end)
    spawn(function()
        while wait() do 
            if _G.ChestFarmEnabled then
                if syn then
                    setfflag("HumanoidParallelRemoveNoPhysics", "False")
                    setfflag("HumanoidParallelRemoveNoPhysicsNoSimulate2", "False")
                    game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
                    if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit == true then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit = false
                    end
                else
                    if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1") then
                            if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit == true then
                                game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit = false
                            end
                            local BodyVelocity = Instance.new("BodyVelocity")
                            BodyVelocity.Name = "BodyVelocity1"
                            BodyVelocity.Parent =  game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                            BodyVelocity.MaxForce = Vector3.new(10000, 10000, 10000)
                            BodyVelocity.Velocity = Vector3.new(0, 0, 0)
                        end
                    end
                    for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false    
                        end
                    end
                end
            else
                if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1"):Destroy();
                end
            end
        end
    end)
    spawn(function()
        while wait() do
            wait(_G.WebhookTimer)
            if _G.WebhookURL then 
                send_webhook()
            end
        end
    end)

    spawn(function()
        while wait() do
            wait(20)
            local VirtualUser=game:service'VirtualUser'
            game:service('Players').LocalPlayer.Idled:connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
            end)
        end
    end)

    spawn(function()
        while wait() do
            wait(0.5)
            game:GetService("GuiService").ErrorMessageChanged:Connect(function()
                game:GetService("TeleportService"):Teleport(game.PlaceId)
            end);
        end
    end)

    if _G.ChestFarmEnabled then
        if game:GetService("Players")["LocalPlayer"].PlayerGui.Main.ChooseTeam.Visible == true then
            game:GetService("Players")["LocalPlayer"].PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Size = UDim2.new(0, 10000, 0, 10000)
            game:GetService("Players")["LocalPlayer"].PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Position = UDim2.new(-4, 0, -5, 0)
            game:GetService("Players")["LocalPlayer"].PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.BackgroundTransparency = 1
            wait(.5)
            game:GetService'VirtualUser':Button1Down(Vector2.new(99,99))
            game:GetService'VirtualUser':Button1Up(Vector2.new(99,99))
        end
        
    end
else
    print("Game not supported")
end
